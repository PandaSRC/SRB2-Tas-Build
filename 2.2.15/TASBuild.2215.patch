From 45b435c25811727fbdc881dc863bf30ba3398c80 Mon Sep 17 00:00:00 2001
From: PAS <pasrc@proton.me>
Date: Sat, 15 Feb 2025 12:24:01 -0500
Subject: [PATCH] SRB2 2.2.15 TAS Build Patch v3.1.0

---
 src/p_inter.c  |  37 +++++++++
 src/p_local.h  |   3 +
 src/st_stuff.c | 205 +++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 245 insertions(+)

diff --git a/src/p_inter.c b/src/p_inter.c
index 27e612154..4255e900e 100644
--- a/src/p_inter.c
+++ b/src/p_inter.c
@@ -4554,3 +4554,40 @@ void P_PlayerFlagBurst(player_t *player, boolean toss)
 
 	return;
 }
+
+// SRB2 TAS Build
+// Get boss information
+boolean P_GetBossInfo(int* bossHealth, boolean* bossFlashing)
+{
+	// Search through all the thinkers for enemies.
+	mobj_t* mo;
+	thinker_t* think;
+
+	boolean bossActive = false;
+	*bossHealth = 0;
+	*bossFlashing = false;
+
+	for (think = thlist[THINK_MOBJ].next; think != &thlist[THINK_MOBJ]; think = think->next)
+	{
+		if (think->function.acp1 == (actionf_p1)P_RemoveThinkerDelayed)
+			continue;
+
+		mo = (mobj_t*)think;
+
+		// Check if this is a boss
+		if (mo->flags & MF_BOSS)
+		{
+			bossActive = true;
+			*bossHealth = mo->health;
+
+			// Check if the boss is flashing
+			if (mo->flags2 & MF2_FRET) {
+				*bossFlashing = true;
+			}
+
+			break; // No need to continue searching
+		}
+	}
+
+	return bossActive;
+}
diff --git a/src/p_local.h b/src/p_local.h
index 85a31cf89..1bc9633dd 100644
--- a/src/p_local.h
+++ b/src/p_local.h
@@ -526,6 +526,9 @@ boolean P_EmblemWasCollected(INT32 emblemID);
 void P_DoNightsScore(player_t *player);
 void P_DoMatchSuper(player_t *player);
 
+// SRB2 TAS Build
+boolean P_GetBossInfo(int* bossHealth, boolean* bossFlashing);
+
 //
 // P_SPEC
 //
diff --git a/src/st_stuff.c b/src/st_stuff.c
index 4fdacd51a..f39d3938d 100644
--- a/src/st_stuff.c
+++ b/src/st_stuff.c
@@ -650,6 +650,207 @@ static void ST_drawDebugInfo(void)
 #undef VFLAGS
 }
 
+// SRB2 TAS Build
+
+// TAS build config
+//#define XYPOS
+#define MAXRINGS
+#define MAXRINGS2L
+#define CEILINGFLOORZ
+#define XYZMOM
+//#define DISABLE
+
+static void ST_drawInfo(void)
+{
+	INT32 height = 170, h = 8, w = 18, lowh;
+	fixed_t textscale = FRACUNIT/2;
+	player_t *tails = &players[consoleplayer+1];
+
+#define VFLAGS V_MONOSPACE|V_SNAPTOTOP|V_SNAPTORIGHT
+
+	if ((moviemode == MM_GIF && cv_gif_downscale.value) || vid.dup == 1)
+	{
+		textscale = FRACUNIT;
+		lowh = ((vid.height/vid.dup) - 16);
+	}
+	else
+	{
+		textscale = FRACUNIT/2;
+		h /= 2;
+		w /= 2;
+		lowh = 0;
+	}
+
+#define V_DrawDebugLine(str) if (lowh && (height > lowh))\
+					{\
+						V_DrawRightAlignedThinString(320, 8+lowh, VFLAGS|V_REDMAP, "SOME INFO NOT VISIBLE");\
+						return;\
+					}\
+					V_DrawAlignedFontString(320, height, VFLAGS, textscale, textscale, str, hu_font, alignright);\
+					height -= h;
+
+	// Show ring count with max rings
+	// Default version is contained in one line, but a version that uses two lines is also provided.
+#ifdef MAXRINGS
+	V_DrawDebugLine(va("Rings: %4d/%4d  ", stplyr->rings, nummaprings));
+	V_DrawDebugLine(va("\n"));
+#elif MAXRINGS2L
+	V_DrawDebugLine(va(" /%4d  ", nummaprings));
+	V_DrawDebugLine(va("Rings:  %4d  ", stplyr->rings));
+	V_DrawDebugLine(va("\n"));
+#endif
+
+	// If Sonic & Tails
+	if (tails->mo)
+	{
+		fixed_t distToSonic = P_AproxDistance(stplyr->mo->x - tails->mo->x, stplyr->mo->y - tails->mo->y);
+		angle_t angleTowardsSonic = R_PointToAngle2(tails->mo->x, tails->mo->y, stplyr->mo->x, stplyr->mo->y);
+		V_DrawDebugLine(va("Tails Z Pos: %5d  ", tails->mo->z>>FRACBITS));
+		V_DrawDebugLine(va("Tails Y Pos: %5d  ", tails->mo->y>>FRACBITS));
+		V_DrawDebugLine(va("Tails X Pos: %5d  ", tails->mo->x>>FRACBITS));
+		V_DrawDebugLine(va("Distance to Sonic: %5d  ", distToSonic>>FRACBITS));
+		V_DrawDebugLine(va("Angle towards Sonic: %5d  ", angleTowardsSonic>>FRACBITS));
+		V_DrawDebugLine(va("Facing Angle: %5d  ", tails->mo->angle>>FRACBITS));
+		V_DrawDebugLine(va("\n"));
+	}
+
+	// Metal Sonic dashmode
+	if (stplyr->dashmode > 0)
+	{
+		V_DrawDebugLine(va("Dashmode: %5d  ", stplyr->dashmode));
+
+		if (stplyr->dashmode == 108)
+		{
+			V_DrawDebugLine(va("Dashmode Speed: %5d  ", stplyr->normalspeed>>FRACBITS));
+		}
+
+		V_DrawDebugLine(va("\n"));
+	}
+
+	// If not in NiGHTS stage
+	if (!(maptol & TOL_NIGHTS))
+	{
+		const fixed_t angle = AngleFixed(stplyr->mo->angle);
+		V_DrawDebugLine(va("Speed: %5d  ", stplyr->speed>>FRACBITS));
+		V_DrawDebugLine(va("Angle: %5d  ", stplyr->mo->angle>>FRACBITS));
+		//V_DrawDebugLine(va("Angle: %5d  ", FixedInt(angle)));
+		V_DrawDebugLine(va("Z Pos: %5d  ", stplyr->mo->z>>FRACBITS));
+#ifdef XYPOS
+		V_DrawDebugLine(va("Y Pos: %5d  ", stplyr->mo->y>>FRACBITS));
+		V_DrawDebugLine(va("X Pos: %5d  ", stplyr->mo->x>>FRACBITS));
+#endif
+
+		// Space Timer
+		if (stplyr->powers[pw_spacetime] > 0)
+		{
+			V_DrawDebugLine(va("Space Timer:   %3d  ", stplyr->powers[pw_spacetime]));
+		}
+
+		// Air Timer
+		if (stplyr->powers[pw_underwater] > 0)
+		{
+			V_DrawDebugLine(va("Air Timer:  %4d  ", stplyr->powers[pw_underwater]));
+		}
+
+		// Spindash Revs
+		if (stplyr->maxdash != stplyr->mindash)
+		{
+			INT16 spinrevs = (6*(stplyr->dashspeed - stplyr->mindash))/(stplyr->maxdash - stplyr->mindash)+1;
+			if (spinrevs > 0)
+			{
+				V_DrawDebugLine(va("Spindash Revs: %5d  ", spinrevs));
+			}
+		}
+
+		// Tails Spindash Revs
+		if (tails->mo)
+		{
+			if (tails->maxdash != tails->mindash)
+			{
+				INT16 tailsspinrevs = (6*(tails->dashspeed - tails->mindash))/(tails->maxdash - tails->mindash)+1;
+				if (tailsspinrevs > 0)
+				{
+					V_DrawDebugLine(va("Tails Spindash Revs: %5d  ", tailsspinrevs));
+				}
+			}
+		}
+
+		// Speed Shoes Timer
+		if (stplyr->powers[pw_sneakers] > 0)
+		{
+			V_DrawDebugLine(va("Speed Shoes Timer: %5d  ", stplyr->powers[pw_sneakers]));
+		}
+
+		// XYZ Momentum
+#ifdef XYZMOM
+		V_DrawDebugLine(va("\n"));
+		V_DrawDebugLine(va("Z Momentum: %5d  ", stplyr->mo->momz>>FRACBITS));
+		V_DrawDebugLine(va("Y Momentum: %5d  ", stplyr->rmomy>>FRACBITS));
+		V_DrawDebugLine(va("X Momentum: %5d  ", stplyr->rmomx>>FRACBITS));
+#endif
+
+		// Boss info
+		int bossHealth;
+		boolean bossFlashing;
+
+		if (P_GetBossInfo(&bossHealth, &bossFlashing))
+		{
+			V_DrawDebugLine(va("\n"));
+			V_DrawDebugLine(va("Boss Health: %5d  ", bossHealth));
+			if (bossFlashing)
+			{
+				V_DrawDebugLine(va("Boss is flashing:   Yes  "));
+			}
+			else
+			{
+				V_DrawDebugLine(va("Boss is flashing:    No  "));
+			}
+		}
+
+		// Platform momentum
+		V_DrawDebugLine(va("\n"));
+		if (stplyr->mo->pmomz>>FRACBITS != 0)
+		{
+			V_DrawDebugLine(va("Platform Z Momentum: %5d  ", stplyr->mo->pmomz>>FRACBITS));
+		}
+		if (stplyr->cmomy>>FRACBITS != 0)
+		{
+			V_DrawDebugLine(va("Conveyor Y Momentum: %5d  ", stplyr->cmomy>>FRACBITS));
+		}
+		if (stplyr->cmomx>>FRACBITS != 0)
+		{
+			V_DrawDebugLine(va("Conveyor X Momentum: %5d  ", stplyr->cmomx>>FRACBITS));
+		}
+
+		// Ceiling and Floor Z Positions
+#ifdef CEILINGFLOORZ
+		V_DrawDebugLine(va("Floor Z Pos: %5d  ", stplyr->mo->floorz>>FRACBITS));
+		V_DrawDebugLine(va("Ceiling Z Pos: %5d  ", stplyr->mo->ceilingz>>FRACBITS));
+#endif
+
+	}
+	// If in NiGHTS stage
+	else
+	{
+		V_DrawDebugLine(va("\n"));
+		V_DrawDebugLine(va("Z SPEED: %6d  ", stplyr->mo->momz>>FRACBITS));
+		V_DrawDebugLine(va("Y SPEED: %6d  ", stplyr->mo->momy>>FRACBITS));
+		V_DrawDebugLine(va("X SPEED: %6d  ", stplyr->mo->momx>>FRACBITS));
+		V_DrawDebugLine(va("A Req: %6d  ", mapheaderinfo[gamemap-1]->grades[stplyr->mare].grade[4]));
+		V_DrawDebugLine(va("End total: %6d  ", (stplyr->marescore + stplyr->spheres * 50)));
+		V_DrawDebugLine(va("End bonus: %6d  ", stplyr->spheres * 50));
+
+		if (stplyr->powers[pw_nights_superloop] > 0)
+		{
+			V_DrawDebugLine(va("Super Paraloop Timer: %5d  ", stplyr->powers[pw_nights_superloop]));
+		}
+	}
+
+#undef V_DrawDebugFlag
+#undef V_DrawDebugLine
+#undef VFLAGS
+}
+
 static void ST_drawScore(void)
 {
 	if (F_GetPromptHideHud(hudinfo[HUD_SCORE].y))
@@ -2716,6 +2917,10 @@ static void ST_overlayDrawer(void)
 			if (!modeattacking && LUA_HudEnabled(hud_lives))
 				ST_drawLivesArea();
 		}
+		// SRB2 TAS Build
+#ifndef DISABLE
+		ST_drawInfo();
+#endif
 	}
 
 	// GAME OVER hud
-- 
2.48.1

